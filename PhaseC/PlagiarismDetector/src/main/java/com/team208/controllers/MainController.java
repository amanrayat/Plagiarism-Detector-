package com.team208.controllers;



import java.util.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.team208.domain.UserEntity;
import com.team208.domain.UserRepository;

@CrossOrigin
@Controller
@RequestMapping(path="/team208") 
public class MainController {

	/**
	 * Logger
	 */
	private static final Logger logger = 
			Logger.getLogger(MainController.class.getName());

	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	@Autowired 
	private UserRepository userRepository;

	@RequestMapping("/")
	@ResponseBody
	public String index() {
		return "Hello World!!!  Team208 Homepage";
	}


	@GetMapping(path="/login")
	public @ResponseBody UserEntity login(@RequestParam Long userId, @RequestParam String password )  {
		UserEntity n = null;
		try {

			n = userRepository.findByNEUId(userId);

		} catch (Exception e) {
			logger.info("Context : "+e.getMessage());

		}


		return n  ;

	}
	//registerUser?userId=01226315&name='rachana'&userRole='student'&password='zzeeddqq'&email='tondare@gmail.com'
	@GetMapping(path="/registerUser") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam Long userId, @RequestParam String name, @RequestParam String userRole,
			@RequestParam String password, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request


		UserEntity n = new UserEntity();
		n.setUserId(userId);
		n.setName(name);
		n.setUserRole(userRole);
		n.setPassword(password);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}


	
	@GetMapping(path="/findStudent")
	public @ResponseBody UserEntity findStudent(@RequestParam Long userId ) {

		return userRepository.findByNEUId(userId);

	}

}
